apiVersion: apps/v1
kind: Deployment
metadata:
  name: poc
  namespace: proxy-test
spec:  
  selector:
    matchLabels:
      app: poc
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: poc
    spec:
      serviceAccount: proxy-root-runner
      volumes:
      - name: envoy-configmap
        configMap:
          name: envoy-config
      - name: envoy-config-folder
        emptyDir: {}
      initContainers:
      - image: quay.io/wi_stefan/envoy-resource-updater
        name: init-resources
        imagePullPolicy: Always
        env:
          - name: RUN_AS_INIT
            value: "true"
        volumeMounts:
        - name: envoy-configmap
          mountPath: /configmap-folder/
        - name: envoy-config-folder
          mountPath: /proxy-config/
      - image: quay.io/wi_stefan/init-iptables
        name: init
        imagePullPolicy: Always
        securityContext:
          privileged: true
      containers:
      # the makeup-broker
      - image: k8s.gcr.io/echoserver:1.4
        name: echo
        securityContext:
          privileged: true
      - image: quay.io/wi_stefan/envoy
        imagePullPolicy: Always
        name: envoy
        args: ["-l trace", "-c /etc/envoy/envoy.yaml"]
        securityContext:
          runAsUser: 1337
        volumeMounts:
        - name: envoy-config-folder
          mountPath: /etc/envoy/
      - image: quay.io/wi_stefan/envoy-resource-updater
        name: update-resources
        imagePullPolicy: Always
        volumeMounts:
        - name: envoy-configmap
          mountPath: /configmap-folder/
        - name: envoy-config-folder
          mountPath: /proxy-config/

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: configuration
  namespace: proxy-test
spec:
  selector:
    matchLabels:
      app: configuration
  replicas: 1
  template:
    metadata:
      labels:
        app: configuration
    spec:
      serviceAccount: proxy-root-runner
      volumes:
        - name: certs-folder
          emptyDir: {}
        - name: proxy-config
          emptyDir: {}
      containers:
        - image: quay.io/wi_stefan/ishare-auth-provider
          name: auth
          env:
            - name: SERVER_PORT
              value: "7070"
            - name: CONFIGURATION_SERVICE_URL
              # loopback can be used, since they are co-located
              value: "http://0.0.0.0:8080"
            - name: CERTIFICATE_FOLDER
              value: "/go/src/app/certs/"
          volumeMounts:
            - name: certs-folder
              mountPath: /go/src/app/certs/
        - image: quay.io/wi_stefan/endpoint-configuration-service
          imagePullPolicy: Always
          name: config-service
          env:
            - name: PROXY_LISTENER_YAML_PATH
              value: "/envoy-config/listener.yaml"
            - name: PROXY_CLUSTER_YAML_PATH
              value: "/envoy-config/cluster.yaml"
            - name: I_SHARE_CERTIFICATE_FOLDER_PATH
              value: "/ishare/certs"
          volumeMounts:
            - name: certs-folder
              mountPath: /ishare/certs
            - name: proxy-config
              mountPath: /envoy-config
        - image: quay.io/wi_stefan/envoy-configmap-updater
          imagePullPolicy: Always
          name: updater
          env:
            - name: PROXY_CONFIG_FOLDER
              value: /proxy-config
          volumeMounts:
            - name: proxy-config
              mountPath: /proxy-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: additional
  namespace: proxy-test
spec:
  selector:
    matchLabels:
      app: additional
  replicas: 1
  template:
    metadata:
      labels:
        app: additional
    spec:
      serviceAccount: proxy-root-runner
      containers:
      - image: k8s.gcr.io/echoserver:1.4
        name: echo-add
        securityContext:
          privileged: true
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: additional-service
  labels:
    app: additional
spec:
  ports:
  - port: 80
    targetPort: 8080
    name: http
    protocol: TCP
  selector:
    app: additional
---
apiVersion: v1
kind: Service
metadata:
  name: configuration-service
  labels:
    app: configuration
spec:
  ports:
  - port: 80
    targetPort: 8080
    name: http
    protocol: TCP
  selector:
    app: configuration
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  labels:
    app: configuration
spec:
  ports:
  - port: 7070
    targetPort: 7070
    name: http
    protocol: TCP
  selector:
    app: configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: proxy-test
data:
  listener.yaml: |
    resources:
      - "@type": type.googleapis.com/envoy.config.listener.v3.Listener
        name: envoy_listener
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15001
        traffic_direction: OUTBOUND
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
        - name: envoy.filters.listener.original_dst  
        filter_chains:
        - name: https_chain
          filter_chain_match: 
            transport_protocol: tls
          filters:
          - name: envoy.filters.network.tcp_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
              cluster: passthrough-https
              stat_prefix: https_passthrough
        - name: http_chain
          filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              route_config:
                name: local_route
                virtual_hosts:
                - name: allow_any
                  domains:
                  - "*"
                  routes:
                  - match: 
                      prefix: "/"
                    route: 
                      cluster: passthrough
                    typed_per_filter_config:
                      envoy.filters.http.lua:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                        disabled: true
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      local domain = request_handle:headers():get(":authority")                      
                      local path = request_handle:headers():get(":path")

                      local headers, body = request_handle:httpCall(
                      "ext-authz",
                      {
                        [":method"] = "GET",
                        [":path"] = "/auth?domain=" .. domain .. "&path=" .. path,
                        [":authority"] = "ext-authz"
                      },
                      null,
                      5000)
                      request_handle:headers():add("Authorization", body)
                    end
              - name: envoy.filters.http.router
  cluster.yaml: |
    resources:
      - "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
        name: passthrough
        type: ORIGINAL_DST
        connectTimeout: 10s
        lbPolicy: CLUSTER_PROVIDED
        original_dst_lb_config:
          use_http_header: true
      - "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
        name: passthrough-https
        type: ORIGINAL_DST
        connectTimeout: 10s
        lbPolicy: CLUSTER_PROVIDED
      - "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
        name: ext-authz
        type: STRICT_DNS
        connect_timeout: 1s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ext-authz
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    protocol: TCP
                    address: 0.0.0.0
                    port_value: 7070
  envoy.yaml: |
    node:
      cluster: passthrough
      id: envoy-node
    dynamic_resources:
      cds_config:
        path: /etc/envoy/cluster.yaml
      lds_config:
        path: /etc/envoy/listener.yaml